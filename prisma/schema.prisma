generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  boards        Board[]
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  attachment    Attachment[]
  cardMember    MembersOnCards[]
  memberBoard   MembersOnBoards[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  authorId    String
  title       String
  description String?
  coverImage  Json
  visibility  BoardVisibility   @default(PUBLIC)
  author      User              @relation(fields: [authorId], references: [id])
  list        List[]
  members     MembersOnBoards[]
}

enum BoardVisibility {
  PUBLIC
  PRIVATE
}

model MembersOnBoards {
  id      String @id @default(cuid())
  userId  String
  boardId String

  user  User  @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
}

model List {
  id       String @id @default(cuid())
  authorId String
  boardId  String
  title    String
  cards    Card[]
  board    Board  @relation(fields: [boardId], references: [id])
}

model Card {
  id          String           @id @default(cuid())
  authorId    String
  listId      String
  title       String
  description String?
  coverImage  Json?
  labels      Label[]
  comments    Comment[]
  attachment  Attachment[]
  members     MembersOnCards[]
  list        List             @relation(fields: [listId], references: [id])
}

model MembersOnCards {
  userId String
  cardId String

  user User @relation(fields: [userId], references: [id])
  card Card @relation(fields: [cardId], references: [id])

  @@unique([userId, cardId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  authorId  String
  cardId    String

  author User @relation(fields: [authorId], references: [id])
  card   Card @relation(fields: [cardId], references: [id])
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  url        String
  size       Int
  uploadedAt DateTime @default(now())
  userId     String
  cardId     String

  user User @relation(fields: [userId], references: [id])
  card Card @relation(fields: [cardId], references: [id])
}

model Label {
  id      String @id @default(cuid())
  name    String
  color   Json
  cardId  String
  card    Card   @relation(fields: [cardId], references: [id])
}

